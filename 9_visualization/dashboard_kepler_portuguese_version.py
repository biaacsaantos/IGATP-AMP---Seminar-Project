# IGATP Dashboard - Streamlit Application

import streamlit as st
import pandas as pd
import geopandas as gpd
import altair as alt
from sklearn.preprocessing import MinMaxScaler
from streamlit_keplergl import keplergl_static
from keplergl import KeplerGl


# CONFIG
st.set_page_config(layout="wide")
st.title("IGATP - √çndice de Atratividade Tur√≠stica Percecionada na AMP")

# DATA LOADING
@st.cache_data

def load_data():
    df_index = pd.read_csv("C:/Users/Fernanda Costa/OneDrive - Universidade de Aveiro/Desktop/seminar_project/6_unsupervised_learning/composite_index_with_clusters.csv")
    df_topics = pd.read_csv("C:/Users/Fernanda Costa/OneDrive - Universidade de Aveiro/Desktop/seminar_project/6_unsupervised_learning/ratings_polarity_lda_topics.csv")
    df_freg = pd.read_csv("C:/Users/Fernanda Costa/OneDrive - Universidade de Aveiro/Desktop/seminar_project/8_spatial_analysis/mean_freg_all_by_parish.csv")
    shape_mun = gpd.read_file("C:/Users/Fernanda Costa/OneDrive - Universidade de Aveiro/Desktop/seminar_project/1_data_collection/spatial_data_AMP/shape_CAOP_Conc_AMP.shp").to_crs("EPSG:4326")
    shape_freg = gpd.read_file("C:/Users/Fernanda Costa/OneDrive - Universidade de Aveiro/Desktop/seminar_project/1_data_collection/spatial_data_AMP/shape_CAOP_Freg_AMP.shp").to_crs("EPSG:4326")

    df = pd.merge(df_index, df_topics[["Nome_Local", "Categoria", "dominant_topic"]],
                  on=["Nome_Local", "Categoria"], how="left")
    df = df.dropna(subset=["Latitude_Nova", "Longitude_Nova"])

    gdf_points = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df["Longitude_Nova"], df["Latitude_Nova"]),
                                   crs="EPSG:4326")
    return gdf_points, shape_mun, shape_freg, df_freg

# Load
points, mun_shape, freg_shape, df_freg = load_data()

# SECTION: ABOUT
with st.expander("‚ÑπÔ∏è Sobre o Projeto"):
    st.markdown("""
    Este dashboard interativo apresenta o **IGATP - √çndice Global de Atratividade Tur√≠stica Percecionada**, desenvolvido a partir de dados p√∫blicos do Google Maps (ratings e coment√°rios). O objetivo √© avaliar a atratividade percebida de locais tur√≠sticos na **√Årea Metropolitana do Porto (AMP)** com base em tr√™s dimens√µes principais:

    - **Rating Bayesiano**: qualidade percebida ajustada ao n√∫mero de avalia√ß√µes;
    - **Popularidade**: n√∫mero de reviews associadas ao local;
    - **Sentimento**: polaridade m√©dia dos coment√°rios (ap√≥s tradu√ß√£o e an√°lise de sentimentos).

    Estes sub-√≠ndices s√£o combinados com pesos ajust√°veis para gerar um valor final de IGATP, entre 0 e 1.

    O dashboard permite:
    - Visualizar os locais georreferenciados e o valor de IGATP;
    - Analisar a interpola√ß√£o espacial do √≠ndice por munic√≠pio e por freguesia;
    - Consultar rankings dos melhores locais, munic√≠pios e freguesias;
    - Explorar a evolu√ß√£o temporal do sentimento nos coment√°rios;
    - Filtrar os resultados por **grupo tem√°tico** e **perfil tur√≠stico** (cluster K-Medoids).

    ---

    ### üß≠ Perfis Tur√≠sticos (Clusters K-Medoids)

    Os locais tur√≠sticos foram agrupados em 6 perfis distintos, com base numa an√°lise PCA (componentes principais) e clustering:

    - **Mainstream Core** (Cluster 2): locais com popularidade e qualidade m√©dias ‚Äî perfil dominante.
    - **Flagship Venues** (Cluster 3): locais de destaque com alta popularidade e excelentes avalia√ß√µes.
    - **Hidden Popular** (Cluster 1): locais com reviews menos positivas, mas muito populares (potencialmente sobrevalorizados).
    - **Underperformers** (Cluster 4): locais com pouca visibilidade e avalia√ß√µes negativas.
    - **Boutique / Niche** (Cluster 0): locais especializados ou de nicho ‚Äî avalia√ß√µes altas, mas com pouca exposi√ß√£o.
    - **Extreme Outlier** (Cluster 5): local com caracter√≠sticas excecionalmente distintas ‚Äî potencial caso an√≥malo.

    ---

    ### üß† T√≥picos Dominantes (LDA Topic Modeling)

    Os coment√°rios dos utilizadores foram analisados por modela√ß√£o de t√≥picos (LDA), resultando em quatro temas principais:

    - **Topic 0 ‚Äì Lazer ao Ar Livre e Natureza**  
      (‚Äúbeach‚Äù, ‚Äúwalk‚Äù, ‚Äúsand‚Äù, ‚Äúview‚Äù, ‚Äúrestaurant‚Äù, ‚Äúquiet‚Äù)  
      ‚Üí experi√™ncias costeiras e naturais, valorizando a tranquilidade e paisagem.

    - **Topic 1 ‚Äì Alojamento e Conforto**  
      (‚Äúroom‚Äù, ‚Äúclean‚Äù, ‚Äúbed‚Äù, ‚Äústaff‚Äù, ‚Äúbreakfast‚Äù)  
      ‚Üí servi√ßos de alojamento, conforto das instala√ß√µes e apoio ao cliente.

    - **Topic 2 ‚Äì Visitas Culturais e Patrim√≥nio**  
      (‚Äúmuseum‚Äù, ‚Äúhistory‚Äù, ‚Äúvisit‚Äù, ‚Äúportuguese‚Äù)  
      ‚Üí locais hist√≥ricos, museol√≥gicos e com valor cultural.

    - **Topic 3 ‚Äì Experi√™ncia Gastron√≥mica**  
      (‚Äúfood‚Äù, ‚Äúservice‚Äù, ‚Äúrestaurant‚Äù, ‚Äúwine‚Äù)  
      ‚Üí avalia√ß√£o da qualidade da comida, servi√ßo e experi√™ncia gastron√≥mica.

    ---
    
    üîç Para mais detalhes sobre a metodologia utilizada, consulte a documenta√ß√£o do projeto ou explore os mapas interativos dispon√≠veis nas v√°rias abas do dashboard.
    """)


# SIDEBAR - FILTERS
with st.sidebar:
    st.markdown("### üéõÔ∏è **Filtros de Visualiza√ß√£o**")

    # Filtro: Grupo Tem√°tico
    st.markdown("**Grupo Tem√°tico**")
    grupos = st.multiselect(
        "Seleciona os grupos a incluir:",
        options=points["Grupo_Tematico"].dropna().unique().tolist(),
        default=points["Grupo_Tematico"].dropna().unique().tolist(),
        help="Seleciona os tipos de servi√ßos tur√≠sticos que queres incluir no √≠ndice."
    )

    st.markdown("---")

    # Filtro: Cluster K-Medoids com nomes leg√≠veis
    st.markdown("**Cluster (K-Medoids)**")

    cluster_labels = {
        0: "Boutique / Niche",
        1: "Hidden Popular",
        2: "Mainstream Core",
        3: "Flagship Venues",
        4: "Underperformers",
        5: "Extreme Outlier"
    }

    available_clusters = sorted(points["cluster_k7_pam"].dropna().unique())
    cluster_options = {cluster_labels[c]: c for c in available_clusters if c in cluster_labels}

    selected_cluster_labels = st.multiselect(
        "Seleciona os perfis de local:",
        options=list(cluster_options.keys()),
        default=list(cluster_options.keys()),
        help="Clusters obtidos via PCA e K-Medoids. Representam perfis tur√≠sticos distintos."
    )

    selected_clusters = [cluster_options[label] for label in selected_cluster_labels]

    st.markdown("---")

    # Pesos dos sub√≠ndices
    st.markdown("### ‚öñÔ∏è **Pesos dos Sub-√≠ndices**")

    w1 = st.slider("Rating Bayesiano", 0.0, 1.0, 1/3, help="Avalia√ß√£o ajustada √† popularidade (Bayesiano).")
    w2 = st.slider("Popularidade", 0.0, 1.0, 1/3, help="N√∫mero de reviews do local.")
    w3 = st.slider("Sentimento", 0.0, 1.0, 1/3, help="Polaridade m√©dia dos coment√°rios.")

    total = w1 + w2 + w3 or 1
    w1, w2, w3 = w1 / total, w2 / total, w3 / total




# CALCULATE IGATP & FILTER DATA
filtered = points[
    (points["Grupo_Tematico"].isin(grupos)) &
    (points["cluster_k7_pam"].isin(selected_clusters))
].copy()

filtered["IGATP"] = w1 * filtered["Rating_Bayes_norm"] + w2 * filtered["Popularity_norm"] + w3 * filtered["Sentiment_norm"]
filtered_nonull = filtered[filtered["IGATP"].notna()]

# Filtrar apenas pontos dentro dos limites da AMP
mun_shape = mun_shape.to_crs("EPSG:4326")
filtered_nonull = gpd.sjoin(
    filtered_nonull.to_crs("EPSG:4326"),
    mun_shape[["geometry"]],
    how="inner",
    predicate="within"
).drop(columns="index_right", errors="ignore")


# TABS
tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìç Mapa Pontual", "üó∫Ô∏è Mapa por Munic√≠pio", "üèòÔ∏è Mapa por Freguesia", "üìä Rankings", "üìà Evolu√ß√£o Temporal"])

# TAB 1 - KEPLER MAP (Pontos)
with tab1:
    st.subheader("Locais com IGATP")

    # Instru√ß√µes para configurar o pop-up corretamente no Kepler.gl
    st.markdown("""
    ‚ÑπÔ∏è **Para ver detalhes completos de cada local ao clicar num ponto no mapa:**

    1. Clique no bot√£o com **a seta cinzenta ‚Üí** no lado esquerdo do mapa (imagem abaixo).
    2. Aceda ao separador **"Interactions"** no topo do painel lateral.
    3. Em **"Tooltip"**, selecione os seguintes campos para exibir no pop-up:

       - `Nome_Local` ‚Üí Nome do Local  
       - `Cidade`  
       - `Categoria`  
       - `IGATP` ‚Üí √çndice IGATP (com base nos pesos definidos)  
       - `Locais_Semelhantes_Perto` ‚Üí N¬∫ de Locais Semelhantes Pr√≥ximos  
       - `dominant_topic` ‚Üí T√≥pico dominante associado ao local

    ‚ö†Ô∏è Estes campos n√£o aparecem por defeito ‚Äî √© necess√°rio ativ√°-los manualmente.
    """)

    # Mapa com Kepler.gl
    mapa1 = KeplerGl(
        height=600,
        data={
            "IGATP Points": filtered_nonull,
            "AMP Munic√≠pios": mun_shape
        },
        config={
            "version": "v1",
            "config": {
                "mapState": {
                    "latitude": 41.15,
                    "longitude": -8.6,
                    "zoom": 8,
                    "bearing": 0,
                    "pitch": 0
                },
                "mapStyle": {
                    "styleType": "muted_night"
                },
                "visState": {
                    "layers": []  # camada por defeito, tooltip configurado manualmente
                }
            }
        }
    )

    keplergl_static(mapa1)
    st.caption("Pontos representam locais tur√≠sticos. Cores e atributos podem ser ajustados diretamente na interface do Kepler.gl.")

# TAB 2 - Interpola√ß√£o por Munic√≠pio
with tab2:
    st.subheader("IGATP m√©dio por Munic√≠pio")

    # Instru√ß√£o para o utilizador
    st.markdown("""
    ‚ÑπÔ∏è **Para visualizar corretamente o gradiente de cores no mapa, siga estes passos no painel do Kepler (√≠cone da camada):**
    1. Clique no bot√£o com **a seta cinzenta ‚Üí** no lado esquerdo do mapa (imagem abaixo).
    2. Clique em **"Munic√≠pios IGATP"** na lista de camadas.
    3. Em **"Fill Color"**, escolha a vari√°vel `IGATPScaled`.
    4. Escolha uma escala de cor (sugest√£o: `quantile` ou `sequential`).
    5. Ajuste o intervalo se necess√°rio (0 a 1).
    """)

    # Spatial Join entre pontos e munic√≠pios para calcular IGATP m√©dio
    filtered_mun = gpd.sjoin(
        filtered_nonull.to_crs("EPSG:4326"),
        mun_shape[["Municipio_", "geometry"]],
        how="left",
        predicate="within"
    )

    filtered_mun["Municipio_"] = filtered_mun["Municipio_"].str.lower().str.strip()
    mun_shape["Municipio_"] = mun_shape["Municipio_"].str.lower().str.strip()

    # C√°lculo da m√©dia do IGATP por munic√≠pio
    mean_mun = filtered_mun.groupby("Municipio_")["IGATP"].mean().reset_index()

    # Merge com shapefile
    mun_map = mun_shape.merge(mean_mun, on="Municipio_", how="left")

    # Normalizar IGATP para gradiente de cores
    scaler = MinMaxScaler()
    mun_map["IGATPScaled"] = scaler.fit_transform(mun_map[["IGATP"]].fillna(0))

    # Mapa com Kepler.gl
    mapa2 = KeplerGl(
        height=600,
        data={"Munic√≠pios IGATP": mun_map},
        config={
            "version": "v1",
            "config": {
                "mapState": {
                    "latitude": 41.15,
                    "longitude": -8.6,
                    "zoom": 8,
                    "bearing": 0,
                    "pitch": 0
                },
                "mapStyle": {
                    "styleType": "muted_night"
                }
                # A camada ser√° configurada manualmente pelo utilizador
            }
        }
    )
    keplergl_static(mapa2)

    st.caption("Interpola√ß√£o por munic√≠pio com base no valor m√©dio de IGATP. Configure o preenchimento da camada no Kepler para ver o gradiente.")


# TAB 3 - Mapa por Freguesia
with tab3:
    st.subheader("IGATP m√©dio por Freguesia")

    # Instru√ß√µes para o utilizador
    st.markdown("""
    ‚ÑπÔ∏è **Para visualizar corretamente o gradiente de cores no mapa:**
    1. Clique no bot√£o com **a seta cinzenta ‚Üí** no lado esquerdo do mapa (imagem abaixo).
    2. Clique na camada **"Freguesias IGATP"** no painel do Kepler (√≠cone do cubo).
    3. Em **"Fill Color"**, selecione `IGATPScaled`.
    4. Escolha uma escala de cor (`quantile`, `sequential`, ou `continuous`).
    5. Ajuste o intervalo de valores, se necess√°rio (de 0 a 1).
    """)

    # Garantir que o c√≥digo da freguesia est√° em formato string
    df_freg["Parish_Code"] = df_freg["Parish_Code"].astype(str)

    # Juntar shapefile com dados agregados
    freg_map = freg_shape.merge(df_freg, left_on="DICOFRE_le", right_on="Parish_Code", how="left")

    # Calcular coluna normalizada
    scaler = MinMaxScaler()
    if "IGATP_Mean" in freg_map.columns:
        freg_map["IGATPScaled"] = scaler.fit_transform(freg_map[["IGATP_Mean"]].fillna(0))
    else:
        freg_map["IGATPScaled"] = 0  # fallback defensivo

    # Garantir CRS
    freg_map = freg_map.to_crs("EPSG:4326")

    # Criar o mapa com Kepler.gl
    mapa3 = KeplerGl(
        height=600,
        data={"Freguesias IGATP": freg_map},
        config={
            "version": "v1",
            "config": {
                "mapState": {
                    "latitude": 41.15,
                    "longitude": -8.6,
                    "zoom": 8,
                    "bearing": 0,
                    "pitch": 0
                },
                "mapStyle": {
                    "styleType": "muted_night"
                }
            }
        }
    )
    keplergl_static(mapa3)

    st.caption("Mapa por freguesia baseado no valor m√©dio de IGATP. Configure o preenchimento manualmente no Kepler.")



# TAB 4 - Rankings
with tab4:
    st.subheader("üèÜ Top 5 por Sub-√≠ndice IGATP")

    # Top 5 locais por sub√≠ndice
    top_igatp = filtered_nonull.groupby("Nome_Local")["IGATP"].mean().sort_values(ascending=False).head(5)
    top_rating = filtered_nonull.groupby("Nome_Local")["Rating_Bayes_norm"].mean().sort_values(ascending=False).head(5)
    top_pop = filtered_nonull.groupby("Nome_Local")["Popularity_norm"].mean().sort_values(ascending=False).head(5)
    top_sent = filtered_nonull.groupby("Nome_Local")["Sentiment_norm"].mean().sort_values(ascending=False).head(5)

    col1, col2 = st.columns(2)
    with col1:
        st.markdown("**üåê Top 5 IGATP**")
        st.dataframe(top_igatp)

        st.markdown("**‚≠ê Top 5 Rating Bayesiano**")
        st.dataframe(top_rating)

    with col2:
        st.markdown("**üì£ Top 5 Popularidade**")
        st.dataframe(top_pop)

        st.markdown("**üí¨ Top 5 Sentimento**")
        st.dataframe(top_sent)

    # NOVA SEC√á√ÉO ‚Äì Rankings territoriais
    st.markdown("---")
    st.subheader("üó∫Ô∏è Rankings Territoriais de IGATP")

    # Top 3 munic√≠pios
    top_mun = mun_map[["Municipio_", "IGATP"]].dropna().sort_values("IGATP", ascending=False)
    st.markdown("**üèôÔ∏è Munic√≠pios com Maior IGATP M√©dio**")
    st.dataframe(top_mun.head(3).reset_index(drop=True))

    st.markdown("**üèôÔ∏è Munic√≠pios com Menor IGATP M√©dio**")
    st.dataframe(top_mun.tail(3).reset_index(drop=True))

    # Top 3 freguesias
    top_freg = freg_map[["Parish", "IGATP_Mean"]].dropna().sort_values("IGATP_Mean", ascending=False)
    st.markdown("**üèòÔ∏è Freguesias com Maior IGATP M√©dio**")
    st.dataframe(top_freg.head(3).reset_index(drop=True))

    st.markdown("**üèòÔ∏è Freguesias com Menor IGATP M√©dio**")
    st.dataframe(top_freg.tail(3).reset_index(drop=True))



# TAB 5 - Evolu√ß√£o Temporal
with tab5:
    st.subheader("Polaridade m√©dia ao longo do tempo")
    df_topics = pd.read_csv("C:/Users/Fernanda Costa/OneDrive - Universidade de Aveiro/Desktop/seminar_project/6_unsupervised_learning/ratings_polarity_lda_topics.csv")
    df_topics["Data_Convertida"] = pd.to_datetime(df_topics["Data_Convertida"], errors='coerce')
    df_month = df_topics.groupby(pd.Grouper(key="Data_Convertida", freq="M")).agg({"Polaridade": "mean"}).dropna().reset_index()
    chart = alt.Chart(df_month).mark_line().encode(
        x=alt.X("Data_Convertida:T", title="Data"),
        y=alt.Y("Polaridade:Q", title="Polaridade M√©dia")
    ).properties(height=400)
    st.altair_chart(chart, use_container_width=True)
    st.caption("Linha temporal da polaridade m√©dia dos coment√°rios (sentimento). Tend√™ncia geralmente positiva e est√°vel.")

# FOOTER
st.markdown("---")
st.caption("Projeto desenvolvido por Beatriz Santos e Joana Guerreiro | Semin√°rio 2025 | Mestrado em Ci√™ncia de Dados para Ci√™ncias Sociais | Universidade de Aveiro")